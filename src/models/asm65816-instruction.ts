import { z } from "zod";

//==============================================================================
// Instruction
//==============================================================================

const argByte = z.object({ unit: z.literal("Byte"), value: z.string() });
const argWord = z.object({ unit: z.literal("Word"), value: z.string() });
const argLong = z.object({ unit: z.literal("Long"), value: z.string() });

const args0 = z.tuple([]);
const argsB = z.tuple([argByte]);
const argsW = z.tuple([argWord]);
const argsL = z.tuple([argLong]);
const argsM = z.tuple([argByte, argByte]);

//prettier-ignore
export const Asm65816InstructionSchema = z.union([
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Direct_Byte_S") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Direct_Long_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Indirect_Byte_SY") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Indirect_Byte_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("Indirect_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("IndirectLong_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ADC"), paramType: z.literal("IndirectLong_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Direct_Byte_S") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Direct_Long_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Indirect_Byte_SY") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Indirect_Byte_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("Indirect_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("IndirectLong_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("AND"), paramType: z.literal("IndirectLong_Byte_Y") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("ASL"), paramType: z.literal("Accumulator") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ASL"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ASL"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ASL"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ASL"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BCC"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BCS"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BEQ"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BIT"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BIT"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("BIT"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("BIT"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BIT"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("BIT"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BMI"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BNE"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BPL"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BRA"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("BRK"), paramType: z.literal("Implied") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("BRL"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BVC"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("BVS"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("CLC"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("CLD"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("CLI"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("CLV"), paramType: z.literal("Implied") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Direct_Byte_S") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Direct_Long_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Indirect_Byte_SY") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Indirect_Byte_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("Indirect_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("IndirectLong_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CMP"), paramType: z.literal("IndirectLong_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("COP"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("COP"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CPX"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("CPX"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CPX"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("CPX"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CPY"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("CPY"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("CPY"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("CPY"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("DEC"), paramType: z.literal("Accumulator") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("DEC"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("DEC"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("DEC"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("DEC"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("DEX"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("DEY"), paramType: z.literal("Implied") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Direct_Byte_S") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Direct_Long_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Indirect_Byte_SY") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Indirect_Byte_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("Indirect_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("IndirectLong_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("EOR"), paramType: z.literal("IndirectLong_Byte_Y") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("INC"), paramType: z.literal("Accumulator") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("INC"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("INC"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("INC"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("INC"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("INX"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("INY"), paramType: z.literal("Implied") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("JML"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("JML"), paramType: z.literal("IndirectLong_Word") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("JMP"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("JMP"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("JMP"), paramType: z.literal("IndirectLong_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("JMP"), paramType: z.literal("Indirect_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("JMP"), paramType: z.literal("Indirect_Word_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("JSL"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("JSR"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("JSR"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("JSR"), paramType: z.literal("Indirect_Word_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Direct_Byte_S") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Direct_Long_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Indirect_Byte_SY") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Indirect_Byte_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("Indirect_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("IndirectLong_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDA"), paramType: z.literal("IndirectLong_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDX"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDX"), paramType: z.literal("Direct_Byte_Y") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDX"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDX"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDX"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDX"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDY"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDY"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDY"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDY"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LDY"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LDY"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("LSR"), paramType: z.literal("Accumulator") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LSR"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("LSR"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LSR"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("LSR"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsM, line: z.number(), opcode: z.literal("MVN"), paramType: z.literal("Move") }),
  z.object({ args: argsM, line: z.number(), opcode: z.literal("MVP"), paramType: z.literal("Move") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("NOP"), paramType: z.literal("Implied") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Direct_Byte_S") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Direct_Long_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Indirect_Byte_SY") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Indirect_Byte_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("Indirect_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("IndirectLong_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ORA"), paramType: z.literal("IndirectLong_Byte_Y") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("PEA"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("PEI"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("PER"), paramType: z.literal("Direct_Word") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PHA"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PHB"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PHD"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PHK"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PHP"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PHX"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PHY"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PLA"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PLB"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PLD"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PLP"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PLX"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("PLY"), paramType: z.literal("Implied") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("REP"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("REP"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("ROL"), paramType: z.literal("Accumulator") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ROL"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ROL"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ROL"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ROL"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("ROR"), paramType: z.literal("Accumulator") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ROR"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("ROR"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ROR"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("ROR"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("RTI"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("RTL"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("RTS"), paramType: z.literal("Implied") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Direct_Byte_S") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Direct_Long_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Indirect_Byte_SY") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Indirect_Byte_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("Indirect_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("IndirectLong_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SBC"), paramType: z.literal("IndirectLong_Byte_Y") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("SEC"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("SED"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("SEI"), paramType: z.literal("Implied") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("SEP"), paramType: z.literal("Immediate_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("SEP"), paramType: z.literal("Immediate_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Direct_Byte_S") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Direct_Long") }),
  z.object({ args: argsL, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Direct_Long_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Direct_Word_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Indirect_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Indirect_Byte_SY") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Indirect_Byte_X") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("Indirect_Byte_Y") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("IndirectLong_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STA"), paramType: z.literal("IndirectLong_Byte_Y") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("STP"), paramType: z.literal("Implied") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STX"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STX"), paramType: z.literal("Direct_Byte_Y") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("STX"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STY"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STY"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("STY"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STZ"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("STZ"), paramType: z.literal("Direct_Byte_X") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("STZ"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("STZ"), paramType: z.literal("Direct_Word_X") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TAX"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TAY"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TCD"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TCS"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TDC"), paramType: z.literal("Implied") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("TRB"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("TRB"), paramType: z.literal("Direct_Word") }),
  z.object({ args: argsB, line: z.number(), opcode: z.literal("TSB"), paramType: z.literal("Direct_Byte") }),
  z.object({ args: argsW, line: z.number(), opcode: z.literal("TSB"), paramType: z.literal("Direct_Word") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TSC"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TSX"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TXA"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TXS"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TXY"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TYA"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("TYX"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("WAI"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("WDM"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("XBA"), paramType: z.literal("Implied") }),
  z.object({ args: args0, line: z.number(), opcode: z.literal("XCE"), paramType: z.literal("Implied") }),
]);

export type Asm65168Instruction = z.infer<typeof Asm65816InstructionSchema>;
